# The name of the workflow
name: poly Deploy prod

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
        description: "Docker image to deploy"
    secrets:
      EC2_SSH_KEY:
        required: true
      EC2_HOST:
        required: true
      EC2_USERNAME:
        required: true
      APP_CERT:
        required: true
      TELEGRAM_TOKEN:
        required: true
      S3_BUCKET:
        required: true
      DOCKER_USERNAME:
        required: true
      APP_NGINX_URL:
        required: true
      APP_YOLO_IP:
        required: true
  workflow_dispatch:
    inputs:
      image:
        required: true
        type: string
        description: "Docker image to deploy"

env:
  REPO_URL: ${{ github.server_url }}/${{ github.repository }}.git
  REPO_NAME: ${{ github.event.repository.name }}
jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/private_key
          chmod 600 ~/.ssh/private_key
          cat > ~/.ssh/config << EOF
          Host ec2
              HostName $EC2_HOST
              User $EC2_USERNAME
              IdentityFile ~/.ssh/private_key
              StrictHostKeyChecking no
          EOF
      - name: Copy deploy script to EC2
        run: |
          scp download_docker.sh ec2:/home/${{ secrets.EC2_USERNAME }}/
          scp docker-compose-files/docker-compose.polybot.yaml ec2:/home/${{ secrets.EC2_USERNAME }}/
          scp docker-compose-files/otelcol-config.yaml ec2:/home/${{ secrets.EC2_USERNAME }}/
          scp containerize.sh ec2:/home/${{ secrets.EC2_USERNAME }}/

      - name: Copy script to EC2
        run: |
          EC2_USERNAME=${{ secrets.EC2_USERNAME }}
          ssh ec2 "chmod +x /home/$EC2_USERNAME/download_docker.sh && bash /home/$EC2_USERNAME/download_docker.sh"

      - name: Execute script on EC2
        run: |
          echo ${{ secrets.DOCKERHUB_USERNAME }}
          echo """
          IMG_NAME=majdabbas99${{ inputs.image }}
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_TOKEN }}
          NGINX_URL=${{ secrets.APP_NGINX_URL }}
          S3_BUCKET_NAME=${{ secrets.S3_BUCKET }}
          ipYolo=${{ secrets.APP_YOLO_IP }}
          """ > .env
          printf '%s\n' '${{ secrets.APP_CERT }}' > polybot_cer.crt
          scp .env ec2:/home/${{ secrets.EC2_USERNAME }}/
          scp polybot_cer.crt ec2:/home/${{ secrets.EC2_USERNAME }}/
          # Extract image base name and current tag
          ssh ec2
          ssh ec2 "bash /home/${{ secrets.EC2_USERNAME }}/containerize $IMG_NAME"

